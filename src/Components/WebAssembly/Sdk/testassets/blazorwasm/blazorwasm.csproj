<Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
    <RuntimeIdentifier>browser-wasm</RuntimeIdentifier>
    <RazorSdkDirectoryRoot>$(RazorSdkArtifactsDirectory)$(Configuration)\sdk-output\</RazorSdkDirectoryRoot>
    <BlazorWebAssemblySdkDirectoryRoot>$(BlazorWebAssemblySdkArtifactsDirectory)$(Configuration)\sdk-output\</BlazorWebAssemblySdkDirectoryRoot>
    <ServiceWorkerAssetsManifest>custom-service-worker-assets.js</ServiceWorkerAssetsManifest>
  </PropertyGroup>

  <!-- Test Placeholder -->

  <PropertyGroup Condition="'$(RunningAsTest)' == ''">
    <!-- We don't want to run build server when not running as tests. -->
    <UseRazorBuildServer>false</UseRazorBuildServer>
  </PropertyGroup>

  <PropertyGroup Condition="'$(BinariesRoot)'==''">
    <!-- In test scenarios $(BinariesRoot) is defined in a generated Directory.Build.props file -->
    <BinariesRoot>$(RepoRoot)artifacts\bin\Microsoft.AspNetCore.Razor.Test.MvcShim.ClassLib\$(Configuration)\netstandard2.0\</BinariesRoot>
  </PropertyGroup>

  <!-- DO NOT add addition references here. This is meant to simulate a non-MVC library -->
  <ItemGroup Condition="'$(BinariesRoot)'!=''">
    <Reference Include="$(BinariesRoot)\Microsoft.AspNetCore.Razor.Test.ComponentShim.dll"/>
    <ProjectReference Include="..\razorclasslibrary\RazorClassLibrary.csproj" />
  </ItemGroup>

  <ItemGroup>
    <!--
      We need a Microsoft.* package to verify type granular trimming. We'll pick a fixed version to we can bake in some details about
      the contents of the package in our tests.
    -->
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="3.1.0" />
  </ItemGroup>

  <ItemGroup>
    <!-- These assets should be treated as static web assets for publish purposes -->
    <Content Include="..\LinkBaseToWebRoot\**\*.js">
      <LinkBase>wwwroot\</LinkBase>
    </Content>

    <!-- This asset should be ignored as a static web assets as it defines CopyToPublishDirectory="Never" -->
    <Content Update="wwwroot\css\app.css" CopyToPublishDirectory="Never" />

    <!-- This asset should be treated as a static web asset and copied into the right location defined by its link attribute. -->
    <Content Include="LinkToWebRoot\css\app.css" Link="wwwroot\css\app.css" />

    <!-- The content from my-prod-service-worker.js should be published under the name my-service-worker.js -->
    <ServiceWorker Include="wwwroot\serviceworkers\my-service-worker.js" PublishedContent="wwwroot\serviceworkers\my-prod-service-worker.js" />
  </ItemGroup>

</Project>
